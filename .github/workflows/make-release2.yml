on:
  workflow_dispatch:
  push:
    branches:
      - actionbuilds-2
    tags:
      - 'v*'
name: Build binaries and create release
jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [windows-latest]
        node: [14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Windows 8.1 SDK
        shell: powershell
        run: |
        Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
        Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
      - run: brew install automake
        if: matrix.os == 'macos-latest'
      - uses: microsoft/setup-msbuild@v1.0.3
        with:
          vs-version: '[14.0,)'
        if: matrix.os == 'windows-latest'
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - run: npm install
      - run: npm test

  build:
    strategy:
      matrix:
        os: [ARM, windows-latest, ARM64, macos-latest, ubuntu-16.04]
    runs-on: ${{ matrix.os }}
    name: Build
    needs: test
    steps:
      - uses: actions/setup-node@v1
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - run: npm install
      - run: npm run prebuild
      - run: npm run prebuild-ia32
        if: matrix.os == 'windows-latest'
      - id: archive_name
        run: echo "::set-output name=NAME::$(`git describe --tags`-linux-`uname -m`.tar)"
      # - shell: bash
      #   run: |
      #     tar --create --verbose --file="${{ steps.archive_name.outputs.NAME }}" --directory "./prebuilds" .
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     prerelease: true
      # - uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ steps.archive_name.outputs.NAME }}
      #     asset_name: ${{ steps.archive_name.outputs.NAME }}
      #     asset_content_type: application/x-tar
